/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package esperteste;

//Apenas para omitir os warnings
import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.SimpleLayout;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
//Apenas para omitir os warnings

import com.espertech.esper.client.*;
import java.util.Random;
import java.util.Date;

public class EsperTeste {

    /*The data we would like to analyze need to be structured in the form of 
    objects before it can be thrown down the pipe to our CEP engine. 
    Let us use a simple example and write a class (some may call it a bean) 
    that represents a stock price at a given time (a stock tick).*/
    public static class Tick {
        String symbol;
        Double price;
        Date timeStamp;
 
        public Tick(String s, double p, long t) {
            symbol = s;
            price = p;
            timeStamp = new Date(t);
        }
        public double getPrice() {return price;}
        public String getSymbol() {return symbol;}
        public Date getTimeStamp() {return timeStamp;}
 
        @Override
        public String toString() {
            return "Price: " + price.toString() + " time: " + timeStamp.toString();
        }
    }
   
    /*For testing purposes, we now create a function that generates random ticks, 
    and throw them down the pipe to the CEP engine. We call this function 
    “GenerateRandomTick”. It takes an EPRuntime object as an argument. This object 
    is used to transmit events to the CEP engine. */
    private static Random generator = new Random();
    public static void GenerateRandomTick(EPRuntime cepRT) {
 
        double price = (double) generator.nextInt(10);
        long timeStamp = System.currentTimeMillis();
        String symbol = "AAPL";
        Tick tick = new Tick(symbol, price, timeStamp);
        System.out.println("Sending tick:" + tick);
        cepRT.sendEvent(tick);
 
    }
    
    /*There are different ways to implement listener, although the following is 
    the simplest one. Here the listener simply prints the object it has received from the engine*/
    public static class CEPListener implements UpdateListener {
 
        public void update(EventBean[] newData, EventBean[] oldData) {
            System.out.println("Event received: " + newData[0].getUnderlying());
        }
    }
 
    public static void main(String[] args) {
        
        //Apenas para omitir os warnings
        SimpleLayout layout = new SimpleLayout();
        ConsoleAppender appender = new ConsoleAppender(new SimpleLayout());
        Logger.getRootLogger().addAppender(appender);
        Logger.getRootLogger().setLevel((Level) Level.WARN);
        //Apenas para omitir os warnings
 
        /*Before we start generating billions of ticks, we need to inform the
        engine about the the kind of objects it will have to handle. 
        This is done via the “Configuration” object that is used 
        when instantiating the CEP engine.
        The Configuration is meant only as an initialization-time object.*/
        Configuration cepConfig = new Configuration();
        cepConfig.addEventType("StockTick", Tick.class.getName());
        EPServiceProvider cep = EPServiceProviderManager.getProvider("myCEPEngine", cepConfig);
        EPRuntime cepRT = cep.getEPRuntime();
 
        /*Now we have a working CEP engine and a fake data feed, it is time to 
        create our first rule, or in the Esper parlance, our first EPL statement. 
        To do so we need to ask the administrator of the engine to record our statement. 
        The CEP engine will then filter the data it receives, and trigger events 
        whenever that data meets the selection rule, or fulfills the pattern defined in the statement.*/
        EPAdministrator cepAdm = cep.getEPAdministrator();
        EPStatement cepStatement = cepAdm.createEPL("select * from " +
                "StockTick(symbol='AAPL').win:length(2) " +
                "having avg(price) > 6.0");
 
        /*The next step now consists in creating a listener and connect it to 
        the events generated by our selection rule.*/
        cepStatement.addListener(new CEPListener());
 
       // We generate a few ticks...
        for (int i = 0; i < 10; i++) {
            GenerateRandomTick(cepRT);
        }
    }
}
